<?php Block::put('breadcrumb') ?>
    <ul>
        <li><a href="<?= Backend::url('aero/clouds/tasks') ?>">Tasks</a></li>
        <li><?= e($this->pageTitle) ?></li>
    </ul>
<?php Block::endPut() ?>

<div class="control-toolbar">
    <div class="toolbar-item">
        <a href="<?= Backend::url('aero/clouds/tasks') ?>" class="btn btn-default oc-icon-list">
            List View
        </a>
    </div>
    <div class="toolbar-item">
        <a href="<?= Backend::url('aero/clouds/tasks/create') ?>" class="btn btn-primary oc-icon-plus">
            New Task
        </a>
    </div>
</div>

<style>
.kanban-board {
    display: flex;
    gap: 20px;
    padding: 20px;
    overflow-x: auto;
    min-height: 600px;
}

.kanban-column {
    flex: 1;
    min-width: 350px;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    border: 1px solid rgba(0, 0, 0, 0.1);
}

.kanban-column-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 2px solid rgba(0, 0, 0, 0.1);
}

.kanban-column-title {
    font-size: 16px;
    font-weight: 600;
}

.kanban-column-count {
    background: #6c757d;
    color: white;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 600;
}

.kanban-column.todo .kanban-column-count { background: #6c757d; }
.kanban-column.doing .kanban-column-count { background: #ffc107; color: #000; }
.kanban-column.done .kanban-column-count { background: #28a745; }

.kanban-cards {
    display: flex;
    flex-direction: column;
    gap: 10px;
    min-height: 100px;
}

.kanban-card {
    border-radius: 6px;
    padding: 12px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.12);
    cursor: move;
    transition: all 0.2s;
    border: 1px solid rgba(0, 0, 0, 0.1);
}

.kanban-card:hover {
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    transform: translateY(-2px);
}

.kanban-card-title {
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 8px;
}

.kanban-card-meta {
    display: flex;
    gap: 8px;
    align-items: center;
    flex-wrap: wrap;
    font-size: 11px;
}

.kanban-card-priority {
    padding: 2px 6px;
    border-radius: 3px;
    color: white;
    font-weight: 600;
}

.priority-low { background: #17a2b8; }
.priority-medium { background: #007bff; }
.priority-high { background: #fd7e14; }
.priority-urgent { background: #dc3545; }

.kanban-card-assigned {
    padding: 2px 6px;
    border-radius: 3px;
    border: 1px solid rgba(0, 0, 0, 0.2);
}

.kanban-card-strict {
    padding: 2px 6px;
    border-radius: 3px;
    background: #ffc107;
    color: #000;
    font-weight: 700;
    font-size: 10px;
}

.kanban-card-frozen {
    padding: 2px 6px;
    border-radius: 3px;
    background: #17a2b8;
    color: #fff;
    font-weight: 700;
    font-size: 10px;
    animation: pulse-frozen 2s infinite;
}

@keyframes pulse-frozen {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
}

.frozen-card {
    border: 2px solid #17a2b8 !important;
    background: #f0f8ff !important;
    opacity: 0.85;
}

.frozen-card:hover {
    cursor: grab !important;
}

.frozen-card[data-can-edit="0"]:hover {
    cursor: not-allowed !important;
}

.sortable-ghost {
    opacity: 0.4;
    background: #e3f2fd;
}

.sortable-drag {
    opacity: 1;
}

.kanban-card-due {
    padding: 2px 6px;
    background: #ffc107;
    color: #000;
    border-radius: 3px;
}

.kanban-card-overdue {
    background: #dc3545;
    color: #fff;
}

.kanban-card-time {
    margin-top: 8px;
    padding: 6px 8px;
    background: #f8fafc;
    border-radius: 4px;
    font-size: 11px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 5px;
}

.kanban-card-time i {
    font-size: 12px;
}

.kanban-card-time .time-value {
    font-family: 'JetBrains Mono', monospace;
    font-weight: 700;
}

.kanban-card-time .time-label {
    font-size: 10px;
    opacity: 0.7;
    margin-left: auto;
}

/* Time remaining color coding */
.time-normal {
    background: #ecfdf5;
    color: #065f46;
    border-left: 3px solid #10b981;
}

.time-soon {
    background: #fef3c7;
    color: #92400e;
    border-left: 3px solid #f59e0b;
}

.time-urgent {
    background: #fee2e2;
    color: #991b1b;
    border-left: 3px solid #ef4444;
}

.time-critical {
    background: #fecaca;
    color: #7f1d1d;
    border-left: 3px solid #dc2626;
    animation: pulse-critical 1.5s infinite;
}

.time-overdue {
    background: #7f1d1d;
    color: #fff;
    border-left: 3px solid #450a0a;
    animation: pulse-overdue 2s infinite;
}

@keyframes pulse-critical {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
}

@keyframes pulse-overdue {
    0%, 100% {
        background: #7f1d1d;
        transform: scale(1);
    }
    50% {
        background: #991b1b;
        transform: scale(1.02);
    }
}

.kanban-card-actions {
    margin-top: 8px;
    padding-top: 8px;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
}

.kanban-card-actions a {
    font-size: 11px;
    margin-right: 10px;
    color: #007bff;
    text-decoration: none;
}

.kanban-card-actions a:hover {
    text-decoration: underline;
}
</style>

<div class="kanban-board">
    <!-- TO DO Column -->
    <div class="kanban-column todo" data-status="todo">
        <div class="kanban-column-header">
            <span class="kanban-column-title">
                <i class="icon-circle-o"></i> To Do
            </span>
            <span class="kanban-column-count"><?= count($todoTasks) ?></span>
        </div>
        <div class="kanban-cards" id="kanban-todo">
            <?php foreach ($todoTasks as $task): ?>
                <?= $this->makePartial('kanban_card', ['task' => $task]) ?>
            <?php endforeach ?>
        </div>
    </div>

    <!-- DOING Column -->
    <div class="kanban-column doing" data-status="doing">
        <div class="kanban-column-header">
            <span class="kanban-column-title">
                <i class="icon-refresh icon-spin"></i> Doing
            </span>
            <span class="kanban-column-count"><?= count($doingTasks) ?></span>
        </div>
        <div class="kanban-cards" id="kanban-doing">
            <?php foreach ($doingTasks as $task): ?>
                <?= $this->makePartial('kanban_card', ['task' => $task]) ?>
            <?php endforeach ?>
        </div>
    </div>

    <!-- DONE Column -->
    <div class="kanban-column done" data-status="done">
        <div class="kanban-column-header">
            <span class="kanban-column-title">
                <i class="icon-check"></i> Done
            </span>
            <span class="kanban-column-count"><?= count($doneTasks) ?></span>
        </div>
        <div class="kanban-cards" id="kanban-done">
            <?php foreach ($doneTasks as $task): ?>
                <?= $this->makePartial('kanban_card', ['task' => $task]) ?>
            <?php endforeach ?>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize Sortable for each column
    ['todo', 'doing', 'done'].forEach(function(status) {
        var el = document.getElementById('kanban-' + status);

        new Sortable(el, {
            group: 'kanban',
            animation: 150,
            ghostClass: 'sortable-ghost',
            dragClass: 'sortable-drag',

            onEnd: function(evt) {
                var taskId = evt.item.dataset.taskId;
                var newStatus = evt.to.closest('.kanban-column').dataset.status;
                var newOrder = evt.newIndex;
                var oldStatus = evt.from.closest('.kanban-column').dataset.status;

                // Update task status via AJAX
                $.request('onMoveTask', {
                    data: {
                        task_id: taskId,
                        status: newStatus,
                        order: newOrder
                    },
                    update: {},  // Prevent any partial updates
                    flash: false,  // Prevent flash message handling
                    success: function(data) {
                        // Update column counts
                        updateColumnCounts();

                        // Show success message
                        $.oc.flashMsg({
                            text: 'Task moved successfully',
                            class: 'success',
                            interval: 2
                        });
                    },
                    error: function(jqXHR, textStatus, errorThrown) {

                        // Move card back to original position on error
                        var originalColumn = document.querySelector('.kanban-column[data-status="' + oldStatus + '"] .kanban-cards');
                        originalColumn.appendChild(evt.item);
                        updateColumnCounts();

                        var response = jqXHR.responseJSON;
                        var errorMsg = response && response.X_OCTOBER_ERROR_MESSAGE
                            ? response.X_OCTOBER_ERROR_MESSAGE
                            : 'Failed to move task';

                        $.oc.flashMsg({
                            text: errorMsg,
                            class: 'error',
                            interval: 4
                        });
                    }
                });
            }
        });
    });

    function updateColumnCounts() {
        ['todo', 'doing', 'done'].forEach(function(status) {
            var column = document.querySelector('.kanban-column.' + status);
            var count = column.querySelectorAll('.kanban-card').length;
            column.querySelector('.kanban-column-count').textContent = count;
        });
    }

    // Real-time countdown updater
    function updateTimeRemainingCounters() {
        var timeElements = document.querySelectorAll('.kanban-card-time[data-due-timestamp]');

        timeElements.forEach(function(element) {
            var dueTimestamp = parseInt(element.dataset.dueTimestamp);
            var now = Math.floor(Date.now() / 1000);
            var diff = dueTimestamp - now;

            var timeValue = element.querySelector('.time-value');
            var timeLabel = element.querySelector('.time-label');

            if (diff < 0) {
                // Overdue
                diff = Math.abs(diff);
                var days = Math.floor(diff / 86400);
                var hours = Math.floor((diff % 86400) / 3600);
                var minutes = Math.floor((diff % 3600) / 60);

                element.className = 'kanban-card-time time-overdue';
                timeLabel.textContent = 'overdue';

                if (days > 0) {
                    timeValue.textContent = '-' + days + 'd ' + hours + 'h';
                } else if (hours > 0) {
                    timeValue.textContent = '-' + hours + 'h ' + minutes + 'm';
                } else {
                    timeValue.textContent = '-' + minutes + 'm';
                }
            } else {
                // Time remaining
                var days = Math.floor(diff / 86400);
                var hours = Math.floor((diff % 86400) / 3600);
                var minutes = Math.floor((diff % 3600) / 60);

                timeLabel.textContent = 'remaining';

                // Update class based on urgency
                if (days == 0 && hours < 2) {
                    element.className = 'kanban-card-time time-critical';
                } else if (days == 0) {
                    element.className = 'kanban-card-time time-urgent';
                } else if (days <= 1) {
                    element.className = 'kanban-card-time time-soon';
                } else {
                    element.className = 'kanban-card-time time-normal';
                }

                if (days > 0) {
                    timeValue.textContent = days + 'd ' + hours + 'h';
                } else if (hours > 0) {
                    timeValue.textContent = hours + 'h ' + minutes + 'm';
                } else {
                    timeValue.textContent = minutes + 'm';
                }
            }
        });
    }

    // Update counters every minute
    setInterval(updateTimeRemainingCounters, 60000);

    // Initial update
    updateTimeRemainingCounters();
});
</script>
