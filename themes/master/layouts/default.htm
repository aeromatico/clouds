[builderList services]
modelClass = "Aero\Manager\Models\Services"
scope = "-"
scopeValue = "{{ :scope }}"
displayColumn = "id"
noRecordsMessage = "No records found"
detailsPage = "-"
detailsUrlParameter = "id"
pageNumber = "{{ :page }}"

[cart]
==
{% set services = services.records  %}



<!DOCTYPE html>
<html lang="{{ app.locale }}" x-data="{ theme: $store.theme.current }" :data-theme="$store.theme.current">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="color-scheme" content="dark light">

    <!-- SEO Meta Tags -->
    {% partial 'seo-meta-tags' %}

    <!-- PWA Meta Tags -->
    {% partial 'pwa-meta-tags' %}

    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- DNS Prefetch -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com">
    <link rel="dns-prefetch" href="//fonts.gstatic.com">

    <!-- Vite Development Client -->
    {{ vite_client() | raw }}
    
    <!-- Critical CSS - Prevents FOUC -->
    <style>
        /* CSS Variables for theming */
        :root {
            --color-background: 255 255 255;
            --color-foreground: 15 23 42;
            --color-border: 226 232 240;
            --color-primary: 14 165 233;
        }
        
        [data-theme="dark"] {
            --color-background: 2 6 23;
            --color-foreground: 248 250 252;
            --color-border: 30 41 59;
            --color-primary: 56 189 248;
        }
        
        /* Immediate hide body to prevent FOUC */
        body {
            visibility: hidden !important;
            background-color: rgb(var(--color-background));
            color: rgb(var(--color-foreground));
            margin: 0;
            padding: 0;
            font-family: 'Plus Jakarta Sans', system-ui, sans-serif;
        }
        
        body.loaded {
            visibility: visible !important;
        }
        
        /* Alpine.js x-cloak directive */
        [x-cloak] {
            display: none !important;
        }
        
        /* Preloader styles - must be inline for immediate effect */
        .page-loader {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgb(var(--color-background));
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            transition: opacity 0.5s ease, visibility 0.5s ease;
        }
        
        .page-loader.loaded {
            opacity: 0;
            visibility: hidden;
        }
        
        .loader-spinner {
            width: 40px;
            height: 40px;
            border: 3px solid rgb(var(--color-border));
            border-top: 3px solid rgb(var(--color-primary));
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }
        
        .loader-content {
            text-align: center;
            color: rgb(var(--color-foreground));
            font-size: 14px;
            font-weight: 500;
        }
        
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        /* Page transition styles */
        .page-transition {
            opacity: 0;
            transform: translateY(20px);
            transition: opacity 0.6s ease, transform 0.6s ease;
        }
        
        .page-transition.loaded {
            opacity: 1;
            transform: translateY(0);
        }
    </style>

    <!-- Theme Initialization Script (must be before Vite) -->
    <script>
        // Initialize theme immediately to prevent flash
        (function() {
            const savedTheme = localStorage.getItem('theme');
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            const shouldBeDark = savedTheme === 'dark' || (savedTheme !== 'light' && prefersDark);
            
            if (shouldBeDark) {
                document.documentElement.classList.add('dark');
                document.documentElement.setAttribute('data-theme', 'dark');
            } else {
                document.documentElement.classList.remove('dark');
                document.documentElement.setAttribute('data-theme', 'light');
            }
        })();
    </script>

    <!-- Vite Assets -->
    {{ vite_entry_tags('js/app.js') | raw }}
    
    <!-- Additional CSS -->
    {% styles %}
    
    <!-- Page-specific styles -->
    {% placeholder head %}
</head>

<body class="antialiased bg-background text-foreground font-sans">
    <!-- Page Loader -->
    <div id="page-loader" class="page-loader">
        <div class="loader-content">
            <div class="loader-spinner"></div>
            <p class="text-sm font-medium">Cargando...</p>
        </div>
    </div>

    <!-- Skip Navigation -->
    <a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 bg-primary text-primary-foreground px-4 py-2 rounded-md">
        Saltar al contenido principal
    </a>

    <!-- Main Content Wrapper -->
    <div id="main-wrapper" class="page-transition" x-cloak>

    <!-- Drawer Structure (closed by default) -->
    <div class="drawer">
        <input id="main-drawer" type="checkbox" class="drawer-toggle" />
        
        <!-- Drawer Content (Main content) -->
        <div class="drawer-content flex flex-col">
            <!-- Navigation -->
            {% partial 'navigation' %}

            <!-- Main Content -->
            <main id="main-content" class="flex-1 min-h-screen">
                {% page %}
            </main>
        </div>
        
        <!-- Drawer Side -->
        <div class="drawer-side z-50">
            <label for="main-drawer" aria-label="close sidebar" class="drawer-overlay"></label>
            <aside class="min-h-full w-72 bg-base-200 text-base-content shadow-xl">
                {% partial 'drawer-content' %}
            </aside>
        </div>
    </div>

    <!-- Footer -->
    {% partial 'footer' %}
    
    </div> <!-- End Main Content Wrapper -->

    <!-- Toast Notifications -->
    <div 
        x-data="toastContainer"
        class="fixed top-4 right-4 z-50 space-y-2"
        x-show="notifications.length > 0"
        x-transition
    >
        <template x-for="notification in notifications" :key="notification.id">
            <div 
                class="toast animate-slide-down"
                :class="{
                    'toast-success': notification.type === 'success',
                    'toast-error': notification.type === 'error',
                    'toast-warning': notification.type === 'warning'
                }"
                x-show="true"
                x-transition:enter="transition ease-out duration-300"
                x-transition:enter-start="opacity-0 transform translate-x-full"
                x-transition:enter-end="opacity-100 transform translate-x-0"
                x-transition:leave="transition ease-in duration-200"
                x-transition:leave-start="opacity-100 transform translate-x-0"
                x-transition:leave-end="opacity-0 transform translate-x-full"
            >
                <div class="flex items-center space-x-3">
                    <div 
                        class="flex-shrink-0"
                        x-show="notification.type === 'success'"
                    >
                        <i class="fas fa-check-circle text-green-500"></i>
                    </div>
                    <div 
                        class="flex-shrink-0"
                        x-show="notification.type === 'error'"
                    >
                        <i class="fas fa-times-circle text-red-500"></i>
                    </div>
                    <div 
                        class="flex-shrink-0"
                        x-show="notification.type === 'warning'"
                    >
                        <i class="fas fa-exclamation-triangle text-yellow-500"></i>
                    </div>
                    <div 
                        class="flex-shrink-0"
                        x-show="notification.type === 'info'"
                    >
                        <i class="fas fa-info-circle text-blue-500"></i>
                    </div>
                    <div class="flex-1">
                        <p class="text-sm font-medium" x-text="notification.message"></p>
                    </div>
                    <div class="flex-shrink-0">
                        <button 
                            @click="remove(notification.id)"
                            class="text-muted-foreground hover:text-foreground transition-colors"
                        >
                            <i class="fas fa-times text-xs"></i>
                        </button>
                    </div>
                </div>
            </div>
        </template>
    </div>

    <!-- PWA Install Prompt -->
    {% partial 'pwa-install-prompt' %}

    <!-- October CMS AJAX Framework -->
    {% framework extras %}
    {% scripts %}

    <!-- Additional JavaScript -->

    <!-- Page-specific scripts -->
    {% placeholder scripts %}

    <!-- Development Tools -->
    {% if app.debug %}
    <div class="fixed bottom-4 left-4 z-40">
        <div 
            x-data="{ open: false }"
            class="relative"
        >
            <button 
                @click="open = !open"
                class="btn btn-secondary btn-sm rounded-full shadow-lg"
                title="Development Tools"
            >
                <i class="fas fa-cog"></i>
            </button>
            
            <div 
                x-show="open"
                @click.away="open = false"
                x-transition
                class="absolute bottom-full left-0 mb-2 bg-card border rounded-lg shadow-lg p-4 min-w-64"
            >
                <h3 class="font-medium text-sm mb-3">Development Tools</h3>
                <div class="space-y-2 text-xs">
                    <div class="flex justify-between">
                        <span>Theme:</span>
                        <span class="font-mono">{{ active_theme.getCode() }}</span>
                    </div>
                    <div class="flex justify-between">
                        <span>Environment:</span>
                        <span class="font-mono">{{ app.env }}</span>
                    </div>
                    <div class="flex justify-between">
                        <span>Debug:</span>
                        <span class="font-mono">{{ app.debug ? 'true' : 'false' }}</span>
                    </div>
                    <div class="flex justify-between">
                        <span>Vite HMR:</span>
                        <span class="font-mono" x-text="window.location.port === '3000' ? 'active' : 'inactive'"></span>
                    </div>
                    <hr class="my-2 border-border">
                    <button 
                        @click="$store.toast.info('Cache cleared successfully')"
                        class="btn btn-outline btn-sm w-full text-xs"
                    >
                        Clear Cache
                    </button>
                </div>
            </div>
        </div>
    </div>
    {% endif %}

    <!-- JSON-LD Structured Data -->
    <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "name": "{{ this.theme.site_name | default('Master Theme') }}",
        "description": "{{ this.theme.site_description | default('Un sitio moderno con OctoberCMS') }}",
        "url": "{{ request.root }}",
        "author": {
            "@type": "Person",
            "name": "aero"
        }
    }
    </script>

    <!-- Page Load Manager -->
    <script>
        // Immediate fallback to prevent infinite loading
        let contentShown = false;
        
        function showContent() {
            if (contentShown) return;
            contentShown = true;
            
            const loader = document.getElementById('page-loader');
            const wrapper = document.getElementById('main-wrapper');
            const body = document.body;
            
            console.log('Showing content...');
            
            // Add loaded class to body first
            body.classList.add('loaded');
            
            // Small delay to ensure styles are applied
            setTimeout(() => {
                if (loader) {
                    loader.classList.add('loaded');
                }
                if (wrapper) {
                    wrapper.classList.add('loaded');
                }
            }, 100);
            
            // Remove loader from DOM after transition
            setTimeout(() => {
                if (loader) {
                    loader.remove();
                }
            }, 600);
        }
        
        // Multiple triggers to ensure content shows
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM Content Loaded');
            
            // Wait for Alpine.js to be ready
            document.addEventListener('alpine:init', () => {
                console.log('Alpine initialized');
                setTimeout(showContent, 100);
            });
            
            // Shorter fallback
            setTimeout(showContent, 500);
        });
        
        // Immediate fallback for slow connections
        setTimeout(showContent, 2000);
        
        // Handle page visibility changes
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden) {
                // Page became visible, ensure content is shown
                showContent();
            }
        });
        
        // Handle browser navigation (back/forward buttons)
        window.addEventListener('pageshow', function(event) {
            // Reset any transition styles when page is shown (including back navigation)
            const wrapper = document.getElementById('main-wrapper');
            const body = document.body;
            
            if (wrapper) {
                wrapper.style.opacity = '';
                wrapper.style.transform = '';
                wrapper.classList.add('loaded');
            }
            
            if (body) {
                body.classList.add('loaded');
            }
            
            // Force content to be visible
            showContent();
        });
    </script>
</body>
</html>